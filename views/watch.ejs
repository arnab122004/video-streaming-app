<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title><%= video?.title || "Video" %> | Streamify</title>
  <link rel="stylesheet" href="/css/style.css" />
  <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
  <style>
    body { font-family: "Segoe UI", Tahoma, sans-serif; background-color: #f5f5f5; margin: 0; padding: 0; }
    .container { max-width: 900px; margin: 20px auto; background: white; padding: 20px; border-radius: 12px; box-shadow: 0 2px 6px rgba(0,0,0,0.1); }
    video { width: 100%; max-width: 720px; height: 405px; display: block; margin: 0 auto; border-radius: 10px; }
    h1 { margin-top: 10px; }
    .meta { color: #666; font-size: 14px; }
    .video-actions { margin-top: 15px; display: flex; align-items: center; gap: 10px; }
    .video-actions button { padding: 8px 16px; border: 1px solid #ccc; border-radius: 6px; cursor: pointer; font-weight: bold; background: white; transition: all 0.3s ease; }
    .video-actions button.active { background: #333; color: white; border-color: #333; }
    .counts { margin-left: 10px; font-size: 14px; color: #333; }
    .comments-section { margin-top: 30px; }
    .comment { background: #f1f1f1; padding: 10px 15px; border-radius: 8px; margin-bottom: 10px; }
    .comment small { color: #666; }
    .comment-form { display: flex; flex-direction: column; gap: 10px; margin-top: 15px; }
    .comment-form textarea { width: 100%; min-height: 80px; padding: 10px; border-radius: 8px; border: 1px solid #ccc; resize: none; }
    .comment-form button { align-self: flex-end; padding: 8px 16px; background: #007bff; color: white; border: none; border-radius: 6px; cursor: pointer; transition: 0.3s; }
    .comment-form button:hover { opacity: 0.85; }
  </style>
</head>

<body data-loggedin="<%= !!isLoggedIn %>">
  <%- include("partials/navbar") %>

  <div class="container">
    <h1><%= video?.title || "Untitled Video" %></h1>

    <video id="videoPlayer" controls poster="<%= video.thumbnailUrl %>">
      <source src="<%= video.fileUrl %>" type="application/x-mpegURL" />
      Your browser does not support HTML5 video.
    </video>

    <p class="meta">
      Views: <%= video?.views || 0 %> | Uploaded: <%= video?.createdAt ? video.createdAt.toDateString() : "" %>
    </p>
    <p><%= video?.description || "" %></p>

    <div class="video-actions">
      <button id="likeBtn" class="<%= userLiked ? 'active' : '' %>">üëç Like</button>
      <button id="dislikeBtn" class="<%= userDisliked ? 'active' : '' %>">üëé Dislike</button>
      <span class="counts" id="likeCount">Likes: <%= likesCount || 0 %></span>
      <span class="counts" id="dislikeCount">Dislikes: <%= dislikesCount || 0 %></span>
    </div>

    <div class="comments-section">
  <h3>Comments (<span id="commentCount"><%= comments.length %></span>)</h3>
  <div id="commentsList">
    <% comments.forEach(c => { %>
      <div class="comment" data-id="<%= c._id %>">
        <p><%= c.text %></p>
        <small>by <%= c.user.username %> on <%= c.createdAt.toDateString() %></small>
        <% if (isLoggedIn && c.user._id.toString() === user._id.toString()) { %>
          <button class="deleteCommentBtn">Delete</button>
        <% } %>
      </div>
    <% }) %>
  </div>

      <form id="commentForm" class="comment-form">
        <textarea id="commentText" placeholder="Add a comment..." required></textarea>
        <button type="submit">Post Comment</button>
      </form>
    </div>
  </div>

  <script>
    const isLoggedIn = document.body.dataset.loggedin === "true";
    const videoId = "<%= video._id %>";
    const likeBtn = document.getElementById("likeBtn");
    const dislikeBtn = document.getElementById("dislikeBtn");
    const likeCountEl = document.getElementById("likeCount");
    const dislikeCountEl = document.getElementById("dislikeCount");


    // function for handel like dislike on click btn like or dislike
        async function handleLikeDislike(type) {
        if (!isLoggedIn) return alert("Please login to like or dislike videos.");

        const endpoint = type === "like" 
          ? `/decideLikeDislike/like/${videoId}` 
          : `/decideLikeDislike/dislike/${videoId}`;

        try {
          const res = await fetch(endpoint, { method: "POST" });
          const data = await res.json();

          if (data.success) {
            // Update counts
            likeCountEl.textContent = `Likes: ${data.likeCount}`;
            dislikeCountEl.textContent = `Dislikes: ${data.dislikeCount}`;

            // Fix button toggling
            if (type === "like") {
              if (likeBtn.classList.contains("active")) {
                // User clicked like again ‚Üí remove like
                likeBtn.classList.remove("active");
              } else {
                likeBtn.classList.add("active");
                dislikeBtn.classList.remove("active");
              }
            } else { // type === "dislike"
              if (dislikeBtn.classList.contains("active")) {
                // User clicked dislike again ‚Üí remove dislike
                dislikeBtn.classList.remove("active");
              } else {
                dislikeBtn.classList.add("active");
                likeBtn.classList.remove("active");
              }
            }
          } else {
            alert("Error updating like/dislike");
          }
        } catch (err) {
          console.error(err);
          alert("Server error");
        }
      }


  likeBtn.addEventListener("click", () => handleLikeDislike("like"));
  dislikeBtn.addEventListener("click", () => handleLikeDislike("dislike"));

    // Video HLS setup
    document.addEventListener("DOMContentLoaded", () => {
      const video = document.getElementById("videoPlayer");
      if (Hls.isSupported()) {
        const hls = new Hls();
        hls.loadSource("<%= video.fileUrl %>");
        hls.attachMedia(video);
      } else if (video.canPlayType("application/vnd.apple.mpegurl")) {
        video.src = "<%= video.fileUrl %>";
      }
    });

    // Comments logic
const commentForm = document.getElementById("commentForm");
const commentText = document.getElementById("commentText");
const commentsList = document.getElementById("commentsList");
const commentCountEl = document.getElementById("commentCount");

// Add comment
commentForm.addEventListener("submit", async (e) => {
  e.preventDefault();
  if (!isLoggedIn) return alert("Please login to comment.");
  const text = commentText.value.trim();
  if (!text) return alert("Please enter a comment");

  try {
    const res = await fetch(`/comments/${videoId}`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ text }),
    });
    const data = await res.json();
    if (data.success) {
      const div = document.createElement("div");
      div.className = "comment";
      div.dataset.id = data.comment._id;
      div.innerHTML = `<p>${data.comment.text}</p>
                       <small>by ${data.comment.user.username} just now</small>
                       <button class="deleteCommentBtn">Delete</button>`;
      commentsList.prepend(div);

      commentText.value = "";
      commentCountEl.textContent = parseInt(commentCountEl.textContent) + 1;
    } else alert("Error adding comment");
  } catch (err) {
    console.error(err);
    alert("Server error");
  }
});

// Delete comment
commentsList.addEventListener("click", async (e) => {
  if (!e.target.classList.contains("deleteCommentBtn")) return;

  const commentDiv = e.target.closest(".comment");
  const commentId = commentDiv.dataset.id;

  if (!confirm("Are you sure you want to delete this comment?")) return;

  try {
    const res = await fetch(`/comments/delete/${commentId}`, { method: "DELETE" });
    const data = await res.json();
    if (data.message === "Comment deleted") {
      commentDiv.remove();
      commentCountEl.textContent = parseInt(commentCountEl.textContent) - 1;
    } else {
      alert(data.message || "Error deleting comment");
    }
  } catch (err) {
    console.error(err);
    alert("Server error");
  }
});

  </script>
</body>
</html>
